  name: Deploy to Amazon ECS
  on:
    push:
      branches: [ main ]
  jobs:
    deploy:
      name: Deploy
      runs-on: ubuntu-latest

      steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Image Name
        id: get-image-name
        run: echo "image=${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_CONTAINER }}:latest" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.get-image-name.outputs.image }}
          provenance: false
          secrets: |
            "AWS_RDS_DB=${{ secrets.AWS_RDS_DB }}"
            "AWS_RDS_ENDPOINT=${{ secrets.AWS_RDS_ENDPOINT }}"
            "AWS_RDS_USER=${{ secrets.AWS_RDS_USER }}"
            "AWS_RDS_PASSWORD=${{ secrets.AWS_RDS_PASSWORD }}"

#      - name: Download task definition
#        run: |
#          aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION }} \
#          --query taskDefinition > task-definition.json
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ secrets.AWS_ECR_CONTAINER }}
#          image: ${{ steps.get-image-name.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ secrets.AWS_ECS_SERVICE }}
#          cluster: ${{ secrets.AWS_ECS_CLUSTER }}
#          wait-for-service-stability: true